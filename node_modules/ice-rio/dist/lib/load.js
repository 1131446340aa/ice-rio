"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
require("reflect-metadata");
const controller_1 = require("./controller");
const sequelize_1 = require("sequelize");
const sequelize_2 = __importDefault(require("../util/sequelize"));
const babel_1 = require("../util/babel");
const constants_1 = require("../util/constants");
const generateApiDoc_1 = require("../util/generateApiDoc");
const rio_fs_1 = require("../util/rio-fs");
const koa_views_1 = __importDefault(require("koa-views"));
const server_1 = require("./server");
const util_1 = require("../util");
const ioredis_1 = __importDefault(require("ioredis"));
const rootDir = process.cwd();
let iceFs = new rio_fs_1.IceFs();
async function load(app, { initDb = false, enableApiDoc = false, apiDocDir, dbConfig, env, appDir = '', viewsConfig, redisConfig }) {
    const appDirAbsolutePath = path_1.default.join(rootDir, appDir);
    const requireMapDir = path_1.default.join(rootDir, '/__autoGenerate__/autoGenerateRequire');
    const requireMapFile = requireMapDir + '/index.ts';
    const controllerDir = appDirAbsolutePath + '/controller';
    const apiDocAbsoluteDir = path_1.default.join(rootDir, '/__autoGenerate__/apiDoc');
    const typingAbsoluteDir = path_1.default.join(rootDir, '/__autoGenerate__/typings');
    const serverJSONAbsoluteDir = path_1.default.join(rootDir, '/__autoGenerate__/serverJSON');
    const modelDir = appDirAbsolutePath + '/model';
    const ServerDir = appDirAbsolutePath + '/server';
    const viewsDir = appDirAbsolutePath + '/views';
    app.use(require('koa-static')(viewsDir));
    app.use((0, koa_views_1.default)(viewsDir, viewsConfig));
    iceFs.makeDir(path_1.default.join(rootDir, '/__autoGenerate__'));
    iceFs.makeDir(typingAbsoluteDir);
    iceFs.deleteAllFile(typingAbsoluteDir);
    iceFs.makeDir(serverJSONAbsoluteDir);
    iceFs.deleteAllFile(serverJSONAbsoluteDir);
    let interfaceIceServerTable = '';
    if (!server_1.Server.prototype.__singleRides__) {
        Object.keys(redisConfig).length &&
            (server_1.Server.prototype.__singleRides__ = new ioredis_1.default(Object.assign({}, redisConfig)));
    }
    if (initDb && dbConfig) {
        interfaceIceServerTable = await processDb(dbConfig, typingAbsoluteDir, modelDir, interfaceIceServerTable);
    }
    let interfaceIceServerApp = await processServer(ServerDir, typingAbsoluteDir);
    fs_1.default.appendFileSync(path_1.default.join(typingAbsoluteDir, './index.ts'), ` declare module 'ice-rio' {
      export interface IceServerApp{
        ${interfaceIceServerApp}
      }
      export interface IceServerTable{
        ${interfaceIceServerTable}
      }
   }`);
    if (env === 'build') {
        processApiDoc(requireMapDir, enableApiDoc, apiDocAbsoluteDir, requireMapFile);
    }
    await processController(controllerDir, env, requireMapFile, enableApiDoc, apiDocAbsoluteDir, serverJSONAbsoluteDir, app);
    if (enableApiDoc && env !== 'build' && apiDocDir) {
        const Mount = require('koa-mount');
        app.use(Mount('/api', require('koa-static')(apiDocDir)));
    }
}
exports.load = load;
async function processController(controllerDir, env, requireMapFile, enableApiDoc, apiDocAbsoluteDir, serverJSONAbsoluteDir, app) {
    var _a, _b;
    let p = {};
    if (fs_1.default.existsSync(controllerDir)) {
        let time = Date.now();
        console.log('开始扫描 controller 目录');
        for (let i of fs_1.default.readdirSync(controllerDir)) {
            const fileName = path_1.default.join(controllerDir, i);
            const controller = (_a = (await Promise.resolve().then(() => __importStar(require(fileName))))) === null || _a === void 0 ? void 0 : _a.default;
            if (typeof controller === 'function') {
                controller.prototype.__env__ = env;
                controller.prototype.__dir__ = requireMapFile.slice(0, -3);
                const metadata = Reflect.getMetadata(controller_1.CONTROLLER_KEY, controller);
                if (env !== 'prod') {
                    const ast = (0, babel_1.parse)(fileName);
                    (0, babel_1.generateFinalParams)(ast, controller.prototype, controllerDir, enableApiDoc);
                    if (env === 'build') {
                        iceFs.BeforeAppend(requireMapFile, `import ${controller.name} from '${path_1.default
                            .relative(apiDocAbsoluteDir, fileName)
                            .slice(0, -3)}'`);
                        fs_1.default.appendFileSync(requireMapFile, `const ${i.slice(0, -3)}Map = new Map
`);
                        (_b = constants_1.controllerMethodsMap
                            .get(controller.prototype)) === null || _b === void 0 ? void 0 : _b.forEach((value, key) => {
                            fs_1.default.appendFileSync(requireMapFile, `${i.slice(0, -3)}Map.set('${String(key)}',${JSON.stringify(value.paramsType)})
`);
                        });
                        fs_1.default.appendFileSync(requireMapFile, `requireMap.set(${controller.name}.prototype,${i.slice(0, -3)}Map)
`);
                    }
                }
                if (env === 'build' && enableApiDoc) {
                    const controllerMethods = constants_1.controllerMethodsMap.get(controller.prototype) || new Map();
                    controllerMethods.forEach((v, key) => {
                        let u = controllerMethods === null || controllerMethods === void 0 ? void 0 : controllerMethods.get(key);
                        u.apiDoc.controller = metadata.path;
                        u.apiDoc.fileName = i.split('.')[0];
                        if (!u.apiDoc.params)
                            u.apiDoc.params = [];
                        let paramsType = (u === null || u === void 0 ? void 0 : u.paramsType) || {};
                        let returnResult = u.returnType || {
                            error: `please input return of ${controller.name}.${String(key)}`
                        };
                        Object.keys(paramsType).forEach((i) => {
                            u.apiDoc.params.push({
                                name: i,
                                value: paramsType[i]
                            });
                        });
                        if (u.apiDoc.params.length) {
                            u.apiDoc.returns = { name: u.apiDoc.path, value: returnResult };
                            const writeDir = path_1.default.join(apiDocAbsoluteDir, u.apiDoc.fileName + '.ts');
                            let ret = (0, generateApiDoc_1.generateApiDoc)(u.apiDoc);
                            fs_1.default.appendFileSync(writeDir, ret);
                        }
                    });
                }
                p[controller.name] = {};
                console.log(constants_1.controllerMethodsMap.get(controller.prototype));
                constants_1.controllerMethodsMap
                    .get(controller.prototype)
                    .forEach((value, methodName) => {
                    var _a;
                    p[controller.name][methodName] = {
                        body: {},
                        header: {},
                        returnType: value.returnType,
                        method: value.apiDoc.method,
                        params: {},
                        query: {}
                    };
                    let v = p[controller.name][methodName];
                    (_a = value === null || value === void 0 ? void 0 : value.params) === null || _a === void 0 ? void 0 : _a.forEach((i) => {
                        v[i.decorateType.toLowerCase()][i.name] =
                            value.paramsType[i.name];
                    });
                });
                fs_1.default.writeFileSync(path_1.default.join(serverJSONAbsoluteDir, './serverJSON.json'), JSON.stringify(p));
                const { router } = controller.prototype;
                router.prefix(metadata.path);
                app.use(router.routes());
                app.use(router.allowedMethods());
                Reflect.construct(controller, []);
            }
            else {
                throw new Error('it only allowed use export default a class in the files of controller dir');
            }
        }
        console.log(JSON.stringify(p));
        console.log(`扫描 controller 目录完成,耗时 ${Date.now() - time} ms`);
        if (env === 'build') {
            fs_1.default.appendFileSync(requireMapFile, `export default requireMap`);
        }
    }
}
function processApiDoc(requireMapDir, enableApiDoc, apiDocAbsoluteDir, requireMapFile) {
    iceFs.makeDir(requireMapDir);
    iceFs.deleteAllFile(requireMapDir);
    if (enableApiDoc) {
        iceFs.makeDir(apiDocAbsoluteDir);
        iceFs.deleteAllFile(apiDocAbsoluteDir);
    }
    fs_1.default.writeFileSync(requireMapFile, `const requireMap = new Map
`);
}
async function processServer(ServerDir, typingAbsoluteDir) {
    var _a, _b;
    let interfaceIceServerApp = '';
    let time = Date.now();
    console.log('开始扫描 server 目录');
    for (let i of fs_1.default.readdirSync(ServerDir)) {
        const server = (_a = (await Promise.resolve().then(() => __importStar(require(path_1.default.join(ServerDir, i)))))) === null || _a === void 0 ? void 0 : _a.default;
        if (typeof server === 'function') {
            let fileName = (_b = i.split('.')) === null || _b === void 0 ? void 0 : _b[0];
            server_1.Server.prototype['app'][fileName] = new server();
            fs_1.default.appendFileSync(path_1.default.join(typingAbsoluteDir, './index.ts'), `import ${fileName} from '${path_1.default.join(ServerDir, fileName)}';
`);
            interfaceIceServerApp += `${fileName}: ${fileName};
`;
        }
        else {
            throw new Error('it only allowed use export default a object in the files of model dir');
        }
    }
    console.log(`扫描 server 目录完成,耗时 ${Date.now() - time} ms`);
    return interfaceIceServerApp;
}
async function processDb(dbConfig, typingAbsoluteDir, modelDir, interfaceIceServerTable) {
    var _a, _b;
    let time = Date.now();
    console.log('开始初始化数据库');
    const { port, host, database, username, password, dialect, is_stress = false } = dbConfig;
    const s = new sequelize_1.Sequelize(database, username, password, {
        host,
        dialect,
        port
    });
    fs_1.default.appendFileSync(path_1.default.join(typingAbsoluteDir, './index.ts'), `import {Model,ModelCtor} from 'ice-rio';
`);
    for (let i of fs_1.default.readdirSync(modelDir)) {
        const model = (_a = (await Promise.resolve().then(() => __importStar(require(path_1.default.join(modelDir, i)))))) === null || _a === void 0 ? void 0 : _a.default;
        if (typeof model === 'object') {
            let fileName = (_b = i.split('.')) === null || _b === void 0 ? void 0 : _b[0];
            server_1.Server.prototype['table'][fileName] = s.define((0, util_1.underline)(fileName), model);
            interfaceIceServerTable += `${fileName}:ModelCtor<Model<Record<any,any>>>;
`;
            if (is_stress) {
                server_1.Server.prototype['table'][fileName]['stress'] = s.define(`${(0, util_1.underline)(fileName)}_stress`, model);
            }
        }
        else {
            throw new Error('it only allowed use export default a object in the files of model dir');
        }
    }
    await (0, sequelize_2.default)(s);
    console.log(`数据库初始完成,耗时 ${Date.now() - time} ms`);
    return interfaceIceServerTable;
}
