"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.options = exports.patch = exports.put = exports.head = exports.get = exports.post = exports.Header = exports.Session = exports.Cookie = exports.Params = exports.Body = exports.Query = void 0;
const koa_router_1 = __importDefault(require("koa-router"));
const constants_1 = require("../util/constants");
const getParamNames_1 = require("../util/getParamNames");
const render_1 = require("../util/render");
const util_1 = require("../util");
const server_1 = require("./server");
function createParamMapping(p) {
    return (attr) => function (_, key, index) {
        const originParamNames = (0, getParamNames_1.getParamNames)(_[key]);
        let controller = constants_1.controllerMethodsMap.get(_);
        if (!controller) {
            constants_1.controllerMethodsMap.set(_, (controller = new Map()));
        }
        let methods = controller.get(key);
        if (!methods) {
            controller.set(key, (methods = {
                params: [],
                paramsType: {},
                apiDoc: {
                    description: `please input @description of ${_.constructor.name}.${key}`
                }
            }));
        }
        if (!methods.params[index])
            methods.params[index] = {};
        methods.params[index].decorateType = p;
        methods.params[index].name = attr || originParamNames[index];
        methods['apiDoc'].routerName = key;
        return _;
    };
}
exports.Query = createParamMapping('Query');
exports.Body = createParamMapping('Body');
exports.Params = createParamMapping('Params');
exports.Cookie = createParamMapping('Cookie');
exports.Session = createParamMapping('Session');
exports.Header = createParamMapping('Header');
function initMethod() {
    return ['post', 'get', 'head', 'put', 'patch', 'options'].reduce((prev, curr) => {
        prev[curr] = function (path, config) {
            return function (target, key) {
                var _a, _b, _c;
                if (!target['router'])
                    target['router'] = new koa_router_1.default();
                path = path || `/${key}`;
                if (!constants_1.controllerMethodsMap.get(target)) {
                    constants_1.controllerMethodsMap.set(target, new Map);
                }
                if (!((_a = constants_1.controllerMethodsMap.get(target)) === null || _a === void 0 ? void 0 : _a.get(key))) {
                    constants_1.controllerMethodsMap.get(target).set(key, { apiDoc: {}, params: [], paramsType: {} });
                }
                let apiDoc = ((_c = (_b = constants_1.controllerMethodsMap.get(target)) === null || _b === void 0 ? void 0 : _b.get(key)) === null || _c === void 0 ? void 0 : _c.apiDoc) || {};
                apiDoc.path = path;
                apiDoc.method = curr;
                const fn = function (...args) {
                    var _a, _b;
                    const [ctx, next] = args;
                    ctx.logId = (0, util_1.generateLogId)();
                    server_1.Server.initContext(ctx);
                    const paramSet = ((_b = (_a = constants_1.controllerMethodsMap.get(target)) === null || _a === void 0 ? void 0 : _a.get(key)) === null || _b === void 0 ? void 0 : _b.params) || [];
                    const finalParams = new Array(target[key].OriginLength)
                        .fill(1)
                        .reduce((prev, curr, index) => {
                        var _a;
                        const p = paramSet[index];
                        const params = ctx.request[(_a = p === null || p === void 0 ? void 0 : p.decorateType) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()] || {};
                        prev.push((p === null || p === void 0 ? void 0 : p.name) ? (p.name === constants_1.All ? params : params[p.name]) : ctx);
                        return prev;
                    }, []);
                    let res = Promise.resolve(target[key].call(target, ...finalParams)).then(async (r) => {
                        if (r instanceof render_1.RouterReturnType) {
                            if (r.type === 'render') {
                                await ctx.render(r.path, r.config);
                            }
                        }
                        else {
                            r && (ctx.body = r);
                        }
                        next();
                    });
                    return res;
                };
                let middleWare = (config === null || config === void 0 ? void 0 : config.middleWare) || [];
                let router = target['router'];
                function runMiddleWare() {
                    while (middleWare.length) {
                        let cur = middleWare.shift();
                        router = router[curr](path, cur);
                    }
                    router === null || router === void 0 ? void 0 : router[curr](path, fn);
                }
                runMiddleWare();
            };
        };
        return prev;
    }, {});
}
_a = initMethod(), exports.post = _a.post, exports.get = _a.get, exports.head = _a.head, exports.put = _a.put, exports.patch = _a.patch, exports.options = _a.options;
