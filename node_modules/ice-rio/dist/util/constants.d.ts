import { Middleware } from 'koa';
import { viewsOptions } from 'koa-views';
import { RedisOptions } from 'ioredis';
export declare const All: unique symbol;
export declare type paramType = 'Params' | 'Query' | 'Body' | 'Cookie' | 'Session' | 'Header';
export declare type Methods = 'post' | 'get' | 'head' | 'put' | 'patch' | 'options';
export declare type routerFn = (path?: string, config?: {
    middleWare: Middleware[];
}) => any;
export declare const importedControllerMap: WeakMap<Object, Record<string, string>>;
export interface IGenerateApiDoc {
    method: string;
    controller: string;
    path: string;
    routerName: string | symbol;
    description: string;
    fileName: string;
    params: any[];
    returns: any;
}
export interface ILoad {
    appDir?: string;
    initDb?: boolean;
    enableApiDoc?: boolean;
    apiDocDir?: string;
    enableViews?: boolean;
    viewsConfig?: typeof viewsOptions;
    dbConfig?: {
        port: number;
        host: string;
        database: string;
        username: string;
        password: string;
        dialect: string;
        is_stress?: boolean;
    };
    redisConfig?: RedisOptions;
    worker?: number;
    env?: 'prod' | 'dev' | 'build';
}
export declare const controllerMethodsMap: WeakMap<Object, Map<string | symbol, {
    returnType: {};
    apiDoc: {
        controller: string;
        fileName: string;
        params: [];
        returns: {};
        description: string;
        routerName: string | symbol;
        path: string;
        method: string;
    };
    params: {
        isRequired: boolean;
        name: string | typeof All;
        typeValue: any;
        decorateType: string;
    }[];
    paramsType: {};
}>>;
