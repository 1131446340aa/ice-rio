export interface IRequestServer {
  [key: string]: any;
}
import { IceFs } from '../util/rio-fs';
import path from 'path';
import fs from 'fs';
const cwd = process.cwd();
export class CreateRequestServer {
  socket: WebSocket;
  server: IRequestServer;
  constructor(
    public config: { baseUrl: string; timeout?: number; ts?: boolean }
  ) {
    if (!this.config.timeout) {
      this.config.timeout = 5000;
    }
    if(this.config.baseUrl[this.config.baseUrl.length-1] === '/') this.config.baseUrl = this.config.baseUrl.slice(0,-1)
    if (globalThis.window) {
      this.socket = new WebSocket(this.config.baseUrl + '/websockets');
    } else {
      const WebSocket = require('websocket').client;
      this.socket = new WebSocket();
      //@ts-ignore
      this.socket.connect(this.config.baseUrl.replace(/https?/,'ws')+ '/websockets')
    }
  }

  async connect() {
    let message = '';
    if(globalThis.window){
      this.socket.onmessage = function (event) {
        message = JSON.parse(event.data);
      };
    }else{
      //@ts-ignore
      this.socket.on('connect',(ws)=>{
        //@ts-ignore
        ws.on('message',(v)=>{
          message = JSON.parse(v.utf8Data)
          ws.close()
        })
      })
    }
    
    let time = 0;
    while (!message) {
      time += 10;
      if (time > this.config.timeout) {
        throw new Error('连接超时');
      }
      await new Promise((resolve) => {
        setTimeout(() => {
          resolve('');
        }, 10);
      });
    }
    if(globalThis.window){
      this.socket.close()
    }
    return message;
  }
  async install(): Promise<IRequestServer> {
    const baseUrl = this.config.baseUrl;
    let message = await this.connect();
    let server: Record<string, Record<string, any>> = {};
    const axios = require('axios');
    Object.keys(message).forEach((serverName) => {
      server[serverName] = {};
      //@ts-ignore
      Object.keys(message[serverName]).forEach((routerName) => {
        server[serverName][routerName] = async function (config: any) {
          return await axios({
            //@ts-ignore
            method: message[serverName][routerName].method,
            url: baseUrl + config.path,
            //@ts-ignore
            header: message[serverName][routerName].header,
            //@ts-ignore
            body: message[serverName][routerName].body,
            //@ts-ignore
            params: message[serverName][routerName].query
          });
        };
      });
    });
    this.server = server;
    return server;
  }
  async generateTS() {
    if (globalThis.window) {
      throw Error('generateTS 请在 node 环境运行');
    }
    let message = await this.connect();
    let s = '';
    Object.keys(message).forEach((serverName) => {
      let u = '';
      //@ts-ignore
      Object.keys(message[serverName]).forEach((routerName) => {
        //@ts-ignore
        const v = message[serverName][routerName];
        let o: Record<string, any> = {};
        if (Object.keys(v.header).length) {
          o.header = v.header;
        }
        if (Object.keys(v.body).length) {
          o.body = v.body;
        }
        if (Object.keys(v.query).length) {
          o.params = v.query;
        }
        if (Object.keys(v.params).length) {
          o.path = v.params;
        }

        u += `${routerName}:(config:${this.type2Interface(o)}) => Promise<${
          v.returnType ? this.type2Interface(v.returnType) : 'void'
        }>;
        `;
      });
      s =
        s +
        `${serverName}: {
          ${u}
      };
      `;
    });
    let r = `
    declare module 'ice-rio' { 
      export interface IRequestServer {
      ${s}
      }
    } `;
    let iceFs = new IceFs();
    iceFs.makeDir(path.join(cwd, '/autoGenerate'));
    iceFs.deleteAllFile(path.join(cwd, '/autoGenerate'));
    fs.writeFileSync(path.join(cwd, '/autoGenerate/type.d.ts'), r);
    return r;
  }
  type2Interface(obj: any) {
    let u = '';
    Object.keys(obj).forEach((attr) => {
      if (typeof obj[attr] === 'string') {
        const [type, o] = obj[attr].split(' | ');
        u += `${attr}${o ? '?' : ''}: ${type};
        `;
      }
      if (typeof obj[attr] === 'object') {
        u += `${attr}: ${this.type2Interface(obj[attr])};
        `;
      }
    });
    return `{
      ${u}
    }`;
  }
}

// export interface IRequestServer {
//   User: {
//     info: (config: {
//       body: { user: { a?: string }; user1: { a?: string } };
//     }) => Promise<{ userName: string }>;
//     test: ()=>Promise<void>;
//   };
// }


